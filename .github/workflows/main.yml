name: main 

on:
  push:
    branches: ["master"]

jobs:
  build:
    runs-on: ubuntu-latest


    steps:
    - uses: actions/checkout@v3

    - name: make application.yml
      run:
        cd ./src/main/resources
        touch ./application.yml
        echo "${{ secrets.APPLICATION_YML}}" > ./appliction.yml
      shell: bash

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.ACCESS_KEY_SECRET }}
        aws-region: ap-northeast-2

    - name: Read secrets from AWS Secrets Manager into environment variables
      uses: abhilash1in/aws-secrets-manager-action@v1.1.0
      with:
        aws-access-key-id: ${{ secrets.ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.ACCESS_KEY_SECRET }}
        aws-region: ap-northeast-2
        secrets: |
          dev/secrets-manager-rds/mysql
        parse-json: false

      #JDK 11 환경설정
    - name: Set up JDK 11
      uses: actions/setup-java@v1
      with:
        java-version: '11'

    #의존성 패키지를 재사용하여 한번 다운로드된 의존성들에 대해 캐싱 기능을 제공하고 있음 -> 전반적인 빌드 시간을 줄여줌.
    - name: Cache Gradle packages
      uses: actions/cache@v2
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    #Gradle wrapper 파일 실행 권한 주기
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew

    #테스트 제외하고 빌드
    - name: Build with Gradle
      run: ./gradlew build -x test

    #테스트만 따로 빌드
    - name: Test with Gradle
      run: ./gradlew --info test

    #실패 여부와 상관없이 모든 테스트 결과를 깃헙에서 확인할 수 있도록 publish
    - name: Publish Test Report
      uses: mikepenz/action-junit-report@v3
      if: always() # always run even if the previous step fails
      with:
        report_paths: '**/build/test-results/test/TEST-*.xml'

